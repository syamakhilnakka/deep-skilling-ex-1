#!/bin/bashset -e# Variables — change before runningREPO_DIR="GitConflictResolutionDemo"REMOTE_URL="https://github.com/YourUsername/GitConflictResolutionDemo.git"  # Replace with your GitHub repo URLUSER_NAME="Your Name"USER_EMAIL="you@example.com"# Step 1: Create folder and init Gitmkdir -p "$REPO_DIR"cd "$REPO_DIR"git initgit config user.name "$USER_NAME"git config user.email "$USER_EMAIL"# Step 2: Create initial README and commit on masterecho "# GitConflictResolutionDemo" > README.mdecho ".DS_Store" > .gitignoregit add .git commit -m "Initial commit with README and .gitignore"# Step 3: Create branch "GitWork" and add hello.xmlgit branch GitWorkgit checkout GitWorkecho "<message>Hello from GitWork branch</message>" > hello.xmlgit add hello.xmlgit commit -m "Add hello.xml in GitWork branch"# Step 4: Switch to master and create hello.xml with different contentgit checkout masterecho "<message>Hello from master branch</message>" > hello.xmlgit add hello.xmlgit commit -m "Add hello.xml in master branch"# Step 5: Show logsgit log --oneline --graph --decorate --all# Step 6: Merge GitWork into master (will cause conflict)set +egit merge GitWorkset -eecho "⚠ Merge conflict occurred in hello.xml"# Step 7: Simulate conflict resolution (keep both changes merged)cat > hello.xml <<EOF<root>    <branch_message>Hello from GitWork branch</branch_message>    <master_message>Hello from master branch</master_message></root>EOFgit add hello.xmlgit commit -m "Resolve merge conflict in hello.xml"# Step 8: Add backup file ignore rule to .gitignoreecho "*.bak" >> .gitignoregit add .gitignoregit commit -m "Add rule to ignore .bak files"# Step 9: Delete GitWork branch after mergegit branch -d GitWork# Step 10: Final loggit log --oneline --graph --decorate# Step 11: Push to GitHubgit branch -M maingit remote add origin "$REMOTE_URL"git push -u origin mainecho "✅ Conflict resolved and pushed to $REMOTE_URL"